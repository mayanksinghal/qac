// Generated by CoffeeScript 1.3.3
(function() {
  var QAC;

  QAC = (function() {
    var KeyList, TipHandle, defaultDict, getCurrentWord, initInputHandle, initWordList, inputArea, isPrintableCharacter, log, logArea, tipHandle, wordTrie;

    inputArea = null;

    logArea = null;

    tipHandle = null;

    defaultDict = [
      {
        "static": true,
        url: 'js/words.php?jsoncallback=?'
      }
    ];

    wordTrie = null;

    TipHandle = (function() {
      var tipArea;

      tipArea = null;

      function TipHandle(eleSel) {
        tipArea = $("<div></div>").addClass("qac_tip");
        tipArea.insertAfter(eleSel);
      }

      TipHandle.prototype.show = function(words, pos) {
        tipArea.html("Ab");
        return tipArea.fadeIn();
      };

      return TipHandle;

    })();

    log = function(msg, cls) {
      if (cls == null) {
        cls = "info";
      }
      if (logArea != null) {
        return logArea.prepend($("<tr></tr>").addClass(cls).append($("<td></td>").html(msg)));
      } else {
        if ((typeof console !== "undefined" && console !== null) && (console.log != null)) {
          return console.log(cls + ": " + msg);
        }
      }
    };

    initWordList = function(dictionaries) {
      var dictInfo, loadDict, _i, _len, _results;
      loadDict = function(dictInfo) {
        var handleStatDict;
        handleStatDict = function(response) {
          var key, _i, _len;
          for (_i = 0, _len = response.length; _i < _len; _i++) {
            key = response[_i];
            wordTrie.add(key, 1);
          }
          return log(wordTrie.getKeys().length + " words loaded from <code>" + dictInfo.url + "</code>");
        };
        if (dictInfo["static"]) {
          return $.ajax({
            url: dictInfo.url,
            dataType: 'json',
            success: handleStatDict
          });
        } else {

        }
      };
      wordTrie = new goog.structs.Trie();
      _results = [];
      for (_i = 0, _len = dictionaries.length; _i < _len; _i++) {
        dictInfo = dictionaries[_i];
        _results.push(loadDict(dictInfo));
      }
      return _results;
    };

    KeyList = {
      tab: 9,
      space: 32
    };

    isPrintableCharacter = function(keyCode) {
      return (keyCode >= 48 && keyCode <= 90) || (keyCode >= 96 && keyCode <= 111) || (keyCode >= 186 && keyCode <= 192) || (keyCode >= 219 && keyCode <= 222);
    };

    getCurrentWord = function(position) {
      var spacePos, text;
      text = inputArea.val().substring(0, position + 1);
      spacePos = text.lastIndexOf(" ");
      if (spacePos === -1) {
        return text;
      }
      return text.substring(spacePos + 1);
    };

    initInputHandle = function() {
      return inputArea.keyup(function(e) {
        var pos, word;
        pos = $(this).caret();
        if (pos.end !== pos.start) {
          return tipHandle.hide();
        } else {
          if (isPrintableCharacter(e.keyCode)) {
            word = getCurrentWord(pos.start);
            return console.log(word);
          } else {

          }
        }
      });
    };

    function QAC(inputAreaSelector, logAreaSel, dictionaries) {
      if (dictionaries == null) {
        dictionaries = defaultDict;
      }
      if (!(inputAreaSelector != null)) {
        log("Unknown inputAreaSelector.", "error");
        return;
      }
      if (logAreaSel != null) {
        logArea = $(logAreaSel);
        log("Debugging started");
      }
      inputArea = $(inputAreaSelector);
      initWordList(dictionaries);
      tipHandle = new TipHandle(inputAreaSelector);
      initInputHandle();
    }

    return QAC;

  })();

  $(function() {
    return new QAC("#tryarea", "table.log tbody");
  });

}).call(this);
